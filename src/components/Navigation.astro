---
import Link from './Link.astro'
import MenuIcon from '@icons/Menu.astro'
import { Icons } from '@components/Icons'

const NAVIGATION_LINKS = [{
	title: 'Inicio',
	href: '#top'
}, {
	title: 'Patrocinadores',
	href: '#sponsors',
	disabled: true
}, {
	title: 'Agenda',
	href: '#agenda',
	disabled: true
}, {
	title: 'Speakers',
	href: '#speakers',
	disabled: true
}, {
	title: 'Tickets',
	href: '#tickets',
	disabled: true
}, {
	title: 'Contacto',
	href: '#contact',
	disabled: true
}, {
	title: 'CÃ³digo de conducta',
	href: '#coc'
}]

const SOCIAL_NETWORKS_LINKS = [
	{
		component: Icons.twitch,
		title: 'twitch',
		icon: 'twitch-icon.svg',
		href: 'https://twitch.tv/midudev'
	},
	{
		component: Icons.youtube,
		title: 'youtube',
		icon: 'youtube-icon.svg',
		href: 'https://youtube.com/midudev'
	},
	{
		component: Icons.instagram,
		title: 'instagram',
		icon: 'instagram-icon.svg',
		href: 'https://instagram.com/midu.dev'
	},
	{
		component: Icons.twitter,
		title: 'twitter',
		icon: 'twitter-icon.svg',
		href: 'https://twitter.com/midudev'
	}
]
---

<aside class='flex flex:row items-center text-primary px-4 pb-20 justify-between xl:sticky xl:top-24 xl:flex-col'>
	<a href='/#top'>
		<Icons.logo class='w-32 animate-zoomIn' />
	</a>

	<input type='checkbox' id='menu' hidden class='peer' />
	<label
		for='menu'
		class='bg-zinc-500/30 w-14 h-14 border-zinc-500 flex items-center justify-center rounded-full border relative z-50 xl:hidden peer-checked:[&>.first]:hidden peer-checked:[&>.last]:block cursor-pointer hover:scale-125 transition hover:border-white'
	>
		<MenuIcon />
	</label>

	<nav id='navbar' class='last absolute top-0 left-0 right-0 z-40 hidden min-h-screen py-24 px-8 bg-black/30 peer-checked:block backdrop-blur-lg text-center xl:px-0 xl:flex xl:flex-col xl:min-h-min xl:backdrop-blur-0 xl:mt-24 transition-all'>
		<ul class='flex flex-col gap-y-8 mb-20'>
			{
				NAVIGATION_LINKS.map(({ disabled, title, href }) => {
					return <li>
						<Link disabled={disabled} href={href} title={title} />
					</li>
				})
			}
		</ul>

		<div class='flex flex-row items-center justify-center gap-4 py-2'>
			{
				SOCIAL_NETWORKS_LINKS.map(({ component: Icon, href, title }) => {
					return <a class='text-white hover:scale-125 transition-all hover:text-primary' href={href} target='_blank' rel='noopener noreferrer'>
						<span aria-label={title}>
							<Icon />
						</span>
					</a>
				})
			}
		</div>

		<span class='text-white opacity-70'>Desarrollado moviendo las manitas ðŸ‘‹</span>
	</nav>
</aside>

<script type='module'>
const sections = document.querySelectorAll('main > section')
const links = document.querySelectorAll('#navbar a')

let direction = 'up'
let prevYPosition = 0

const setScrollDirection = () => {
	direction = document.documentElement.scrollTop > prevYPosition
		? 'down'
		: 'up'

	prevYPosition = document.documentElement.scrollTop
}

const options = {
	root: null,
	threshold: 0,
	rootMargin: '0px'
}

const getTargetSection = (entry) => {
	const index = sections.findIndex((section) => section === entry.target)

	if (index >= sections.length - 1) {
		return entry.target
	} else {
		return sections[index + 1]
	}
}

const updateLink = (target) => {
	console.log('updateLink', target)
}

const onIntersect = (entries) => {
	entries.forEach((entry) => {
		if (document.documentElement > prevYPosition) {
			direction = 'down'
		} else {
			direction = 'up'
		}

		prevYPosition = document.documentElement.scrollTop

		const target = direction === 'down' ? getTargetSection(entry) : entry.target

		if (shouldUpdate(entry)) {
			updateLink(target)
		}
	})
}

const shouldUpdate = (entry) => {
	if (direction === 'down' && !entry.isIntersecting) {
		return true
	}

	if (direction === 'up' && entry.isIntersecting) {
		return true
	}

	return false
}

const observer = new IntersectionObserver(onIntersect, options)

sections.forEach(section => {
	observer.observe(section)
})
</script>

<script type='module'>
const menuCheckbox = document.getElementById('menu')
const mediaQuery = window.matchMedia('(min-width: 1024px)') // Breakpoint lg

const $navbar = document.querySelector('#navbar')
$navbar.querySelectorAll('a').forEach(anchor => {
	anchor.addEventListener('click', (_event) => {
		menuCheckbox.checked = false
		if (document.body.style.overflowY === 'hidden') {
			hideOverFlow(false)
		}
	})
})

/** @param {boolean} value */
function hideOverFlow (value) {
	if (value) {
		window.scrollTo(0, 0)
		document.body.style.overflowY = 'hidden'
	} else {
		document.body.style.overflowY = 'auto'
	}
}

menuCheckbox.addEventListener('change', (e) =>
	e.target.checked
		?	hideOverFlow(true)
		: hideOverFlow(false)
)

mediaQuery.addEventListener('change', (e) => {
	if (e.matches) {
		hideOverFlow(false)
		menuCheckbox.checked = false
	}
})
</script>
